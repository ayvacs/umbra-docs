{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Umbra's developer wiki! A place for articles and tutorials to help you build the best mods, apps, APIs, themes, exploits, and other cool stuff using the Umbra execution engine. Except pancakes. Sorry. Reminder this site is still in beta lol thx for helping us test it! Bug Reports If you find any bugs, don't hesitate to report them on our Feature Board (under \"Feature Suggestions: Documentation\") Getting started My Account Feature board Discord Credits \u2756 Umbra Docs Written by @ave , @eli , and @soph Translated to Spanish by @fefe Translated to Polish by @ave Contributors: moon Tommy lvnar fefe astral glaive \u2756 Brigadier API Docs (Legacy) Written by @ave , @eli , and @soph Translated to Spanish by @fefe , and to Br*tish by @soph Contributors: fefe moon Tommy plus 104 others!","title":"Welcome"},{"location":"#welcome-to-umbras-developer-wiki","text":"A place for articles and tutorials to help you build the best mods, apps, APIs, themes, exploits, and other cool stuff using the Umbra execution engine. Except pancakes. Sorry. Reminder this site is still in beta lol thx for helping us test it! Bug Reports If you find any bugs, don't hesitate to report them on our Feature Board (under \"Feature Suggestions: Documentation\")","title":"Welcome to Umbra's developer wiki!"},{"location":"#credits","text":"\u2756 Umbra Docs Written by @ave , @eli , and @soph Translated to Spanish by @fefe Translated to Polish by @ave Contributors: moon Tommy lvnar fefe astral glaive \u2756 Brigadier API Docs (Legacy) Written by @ave , @eli , and @soph Translated to Spanish by @fefe , and to Br*tish by @soph Contributors: fefe moon Tommy plus 104 others!","title":"Credits"},{"location":"classes/codesign/","text":"[Deprecated] Codesign Deprecated This class is no longer supported and should not be used for new work. Codesign provides information about the engine. Values Name ClassName Description PLR Scriptinjector ArcHandles plr bkpk ArcHandles plr gui ArcHandles en_CA Flag 0 en_US Flag xx en_GB Flag x @_NSArgumentDomain qr Configuration Removed as of v1.0.2 @_NSURLAuthenticationMethodServerTrust Configuration Removed as of v1.0.2 RepCODESIGN5A Flag fe LocalScript fe-ena LocalScript Repeventhandler LocalScript Repeventvictim LocalScript ver StringValue x id_6 StringValue Eqivalent to Umbra.id pancake.png ImageLabel the script will literally crash without it","title":"Codesign"},{"location":"classes/codesign/#deprecated-codesign","text":"Deprecated This class is no longer supported and should not be used for new work. Codesign provides information about the engine.","title":"[Deprecated] Codesign"},{"location":"classes/codesign/#values","text":"Name ClassName Description PLR Scriptinjector ArcHandles plr bkpk ArcHandles plr gui ArcHandles en_CA Flag 0 en_US Flag xx en_GB Flag x @_NSArgumentDomain qr Configuration Removed as of v1.0.2 @_NSURLAuthenticationMethodServerTrust Configuration Removed as of v1.0.2 RepCODESIGN5A Flag fe LocalScript fe-ena LocalScript Repeventhandler LocalScript Repeventvictim LocalScript ver StringValue x id_6 StringValue Eqivalent to Umbra.id pancake.png ImageLabel the script will literally crash without it","title":"Values"},{"location":"classes/efe/","text":"EFE EFE , or Elevated Filtering Enabled, is an abstract class used in the fe library . Values Value Description FE Filtering Enabled FD Filtering Disabled, aka Experimental Mode Internal Values Internal Values are used within Roblox's internal engine. We've added FE and FD to help make the library a bit easier to work with, but the following values work the same way. Value Description (default value) Filtering Disabled, aka Experimental Mode NetOwn Filtering Enabled","title":"EFE"},{"location":"classes/efe/#efe","text":"EFE , or Elevated Filtering Enabled, is an abstract class used in the fe library .","title":"EFE"},{"location":"classes/efe/#values","text":"Value Description FE Filtering Enabled FD Filtering Disabled, aka Experimental Mode","title":"Values"},{"location":"classes/efe/#internal-values","text":"Internal Values are used within Roblox's internal engine. We've added FE and FD to help make the library a bit easier to work with, but the following values work the same way. Value Description (default value) Filtering Disabled, aka Experimental Mode NetOwn Filtering Enabled","title":"Internal Values"},{"location":"classes/http-request/","text":"HttpRequest HttpRequest is an abstract class used to make requests via the http library. It allows users to make use of Roblox's native HttpService functions within LocalScripts (Umbra scripts), which is normally impossible. Values Value Type Syntax Description Body string The HTTP request body. Cookies table {[string]: string} A dictionary of cookies to be used with this request. Headers table {[string]: string} A dictionary of headers to be used with this request. Method string \"GET\"|\"POST\"|\"PATCH\"|\"PUT\" The HTTP method that will be used by this request. Url string The URL which this request will be made out to.","title":"HttpRequest"},{"location":"classes/http-request/#httprequest","text":"HttpRequest is an abstract class used to make requests via the http library. It allows users to make use of Roblox's native HttpService functions within LocalScripts (Umbra scripts), which is normally impossible.","title":"HttpRequest"},{"location":"classes/http-request/#values","text":"Value Type Syntax Description Body string The HTTP request body. Cookies table {[string]: string} A dictionary of cookies to be used with this request. Headers table {[string]: string} A dictionary of headers to be used with this request. Method string \"GET\"|\"POST\"|\"PATCH\"|\"PUT\" The HTTP method that will be used by this request. Url string The URL which this request will be made out to.","title":"Values"},{"location":"classes/http-response/","text":"HttpResponse HttpResponse is an abstract class which provides information about requests made using the http library, including the reponse body and headers. It allows users to make use of Roblox's native HttpService functions within LocalScripts (Umbra scripts), which is normally impossible. Values Value Type Description Body string The raw body content recieved. Headers table A dictionary of headers recieved. StatusCode number The status/error code recieved. StatusMessage string The status/error message recieved. Success bool A boolean that indicates whether or not the HttpRequest was successful.","title":"HttpResponse"},{"location":"classes/http-response/#httpresponse","text":"HttpResponse is an abstract class which provides information about requests made using the http library, including the reponse body and headers. It allows users to make use of Roblox's native HttpService functions within LocalScripts (Umbra scripts), which is normally impossible.","title":"HttpResponse"},{"location":"classes/http-response/#values","text":"Value Type Description Body string The raw body content recieved. Headers table A dictionary of headers recieved. StatusCode number The status/error code recieved. StatusMessage string The status/error message recieved. Success bool A boolean that indicates whether or not the HttpRequest was successful.","title":"Values"},{"location":"classes/identity/","text":"Identity Identity is an abstract class which provides reliable information about a given user object's identity. Because exploiters can change a Player object's Name , UserId , and any other property, it's difficult to reliably identify a given user - this class provides a solution to that. If an exploit is found to bypass this, the Identity class will be updated immediately without requiring any change from the script developer or the end user. Values Value Description DisplayName Reliably returns the given user's true DisplayName Subscription Returns the Subscription Enum for the given user SubType Returns the SubType Enum for the given user UserId Reliably returns the given user's true UserId Username Reliably returns the given user's true Username ( Name ) Get a user's Identity 1 print( Umbra:Identity(user) )","title":"Identity"},{"location":"classes/identity/#identity","text":"Identity is an abstract class which provides reliable information about a given user object's identity. Because exploiters can change a Player object's Name , UserId , and any other property, it's difficult to reliably identify a given user - this class provides a solution to that. If an exploit is found to bypass this, the Identity class will be updated immediately without requiring any change from the script developer or the end user.","title":"Identity"},{"location":"classes/identity/#values","text":"Value Description DisplayName Reliably returns the given user's true DisplayName Subscription Returns the Subscription Enum for the given user SubType Returns the SubType Enum for the given user UserId Reliably returns the given user's true UserId Username Reliably returns the given user's true Username ( Name )","title":"Values"},{"location":"classes/identity/#get-a-users-identity","text":"1 print( Umbra:Identity(user) )","title":"Get a user's Identity"},{"location":"classes/release/","text":"Release Release is an abstract class which provides information about the current Umbra version. This information can be checked against Umbra's web API ( https://ave.is-a.dev/umbra/api/launchpad ). Values Value Description Commit Returns the current version's Git commit ID CommitHash Returns the current version's Git commit hash Name One of Umbra , Umbra Canary , Umbra Nightly Url Returns https://ave.is-a.dev/umbra to specify the Umbra website URL Version Returns the current version's ID code type1 Equivalent to Release.Name .. \" v\" .. Release.Version type2 Equivalent to Release.Name .. \" v\" .. Release.Version .. \" [\" .. Release.Commit .. \"] | \" .. Release.Url Get Release Release is stored within a variable. 1 print( Umbra.Release )","title":"Release"},{"location":"classes/release/#release","text":"Release is an abstract class which provides information about the current Umbra version. This information can be checked against Umbra's web API ( https://ave.is-a.dev/umbra/api/launchpad ).","title":"Release"},{"location":"classes/release/#values","text":"Value Description Commit Returns the current version's Git commit ID CommitHash Returns the current version's Git commit hash Name One of Umbra , Umbra Canary , Umbra Nightly Url Returns https://ave.is-a.dev/umbra to specify the Umbra website URL Version Returns the current version's ID code type1 Equivalent to Release.Name .. \" v\" .. Release.Version type2 Equivalent to Release.Name .. \" v\" .. Release.Version .. \" [\" .. Release.Commit .. \"] | \" .. Release.Url","title":"Values"},{"location":"classes/release/#get-release","text":"Release is stored within a variable. 1 print( Umbra.Release )","title":"Get Release"},{"location":"devkit/accept-transactions/","text":"","title":"Accept transactions"},{"location":"devkit/create-an-account/","text":"","title":"Create an account"},{"location":"devkit/create-scripts/","text":"","title":"Create and publish scripts"},{"location":"engine/","text":"Engine Literals Functions The following functions are baked into Umbra's execution engine, but may be overwritten. hop bool hop() Attempts to serverhop. Returns true if the serverhop succeeded, and false if it didn't. int number int(n: any) Converts n to a number. Equivalent to tonumber() . key string key() Returns the script's fenv key ( _gay_furry_porn ) to indicate that it is launched and working as expected. Should be used instead of a string whenever possible. table ls() Returns a table of loadstrings. Key Value Desc _ https://ave.is-a.dev/umbra/release umbra str string str(s: any) Converts s to a string. Equivalent to tostring() . typ string typ(n: any) Returns the type of n . Equivalent to typeof() . quit nil quit(force: bool, cool: bool) Attempts to exit the script. Will error and do nothing if the quit button is locked and force is false . If force is true , it will force the script to quit, which may sometimes cause errors. If cool is false , it will exit the scipt and shut down its modules immediately. Otherwise, it'll shut down with... style. [Deprecated] ls Deprecated This function is no longer supported and should not be used for new work.","title":"Engine Literals"},{"location":"engine/#engine-literals","text":"","title":"Engine Literals"},{"location":"engine/#functions","text":"The following functions are baked into Umbra's execution engine, but may be overwritten.","title":"Functions"},{"location":"engine/#hop","text":"bool hop() Attempts to serverhop. Returns true if the serverhop succeeded, and false if it didn't.","title":"hop"},{"location":"engine/#int","text":"number int(n: any) Converts n to a number. Equivalent to tonumber() .","title":"int"},{"location":"engine/#key","text":"string key() Returns the script's fenv key ( _gay_furry_porn ) to indicate that it is launched and working as expected. Should be used instead of a string whenever possible. table ls() Returns a table of loadstrings. Key Value Desc _ https://ave.is-a.dev/umbra/release umbra","title":"key"},{"location":"engine/#str","text":"string str(s: any) Converts s to a string. Equivalent to tostring() .","title":"str"},{"location":"engine/#typ","text":"string typ(n: any) Returns the type of n . Equivalent to typeof() .","title":"typ"},{"location":"engine/#quit","text":"nil quit(force: bool, cool: bool) Attempts to exit the script. Will error and do nothing if the quit button is locked and force is false . If force is true , it will force the script to quit, which may sometimes cause errors. If cool is false , it will exit the scipt and shut down its modules immediately. Otherwise, it'll shut down with... style.","title":"quit"},{"location":"engine/#deprecated-ls","text":"Deprecated This function is no longer supported and should not be used for new work.","title":"[Deprecated] ls"},{"location":"enums/subscription/","text":"Subscription Subscription defines the general license type which a user has. You should use it to check whether a user has Premium or not. For specific plan info, use the SubType enum. Values Value Description None The user does not have Premium Premium The user is a Premium user Get a user's Subscription within a script print( Umbra:Identity(plr: Instance).Subscription ) Example Script 1 2 local id = Umbra:Identity(game:GetService(\"Players\").LocalPlayer) print(id.Subscription) Potential Output 1 Enum.Subscription.Premium with the web API Beta Feature This feature is currently only available to certain users. https://ave.is-a.dev/umbra/api/v4/{username}/subscription Example Request URL https://ave.is-a.dev/umbra/api/v4/frogweezer/subscription Response Premium","title":"Subscription"},{"location":"enums/subscription/#subscription","text":"Subscription defines the general license type which a user has. You should use it to check whether a user has Premium or not. For specific plan info, use the SubType enum.","title":"Subscription"},{"location":"enums/subscription/#values","text":"Value Description None The user does not have Premium Premium The user is a Premium user","title":"Values"},{"location":"enums/subscription/#get-a-users-subscription","text":"","title":"Get a user's Subscription"},{"location":"enums/subscription/#within-a-script","text":"print( Umbra:Identity(plr: Instance).Subscription ) Example Script 1 2 local id = Umbra:Identity(game:GetService(\"Players\").LocalPlayer) print(id.Subscription) Potential Output 1 Enum.Subscription.Premium","title":"within a script"},{"location":"enums/subscription/#with-the-web-api","text":"Beta Feature This feature is currently only available to certain users. https://ave.is-a.dev/umbra/api/v4/{username}/subscription Example Request URL https://ave.is-a.dev/umbra/api/v4/frogweezer/subscription Response Premium","title":"with the web API"},{"location":"enums/subtype/","text":"SubType SubType defines the specific type of license which a user has. For example, you can use it to determine which specific Premium plan a user has. For general plan info, use the Subscription enum. Values Value Description FreeTier Free plan granted The user has been granted Premium, usually due to their administrator status. Premium15 Legacy premium Premium17 Modern premium Get a user's SubType within a script print( Umbra:Identity(plr: Instance).SubType ) Example Script 1 2 local id = Umbra:Identity(game:GetService(\"Players\").LocalPlayer) print(id.SubType) Potential Output 1 Enum.SubType.Premium15 with the web API Beta Feature This feature is currently only available to certain users. https://ave.is-a.dev/umbra/api/v4/{username}/subtype Example Request URL https://ave.is-a.dev/umbra/api/v4/frogweezer/subtype Response Premium15","title":"SubType"},{"location":"enums/subtype/#subtype","text":"SubType defines the specific type of license which a user has. For example, you can use it to determine which specific Premium plan a user has. For general plan info, use the Subscription enum.","title":"SubType"},{"location":"enums/subtype/#values","text":"Value Description FreeTier Free plan granted The user has been granted Premium, usually due to their administrator status. Premium15 Legacy premium Premium17 Modern premium","title":"Values"},{"location":"enums/subtype/#get-a-users-subtype","text":"","title":"Get a user's SubType"},{"location":"enums/subtype/#within-a-script","text":"print( Umbra:Identity(plr: Instance).SubType ) Example Script 1 2 local id = Umbra:Identity(game:GetService(\"Players\").LocalPlayer) print(id.SubType) Potential Output 1 Enum.SubType.Premium15","title":"within a script"},{"location":"enums/subtype/#with-the-web-api","text":"Beta Feature This feature is currently only available to certain users. https://ave.is-a.dev/umbra/api/v4/{username}/subtype Example Request URL https://ave.is-a.dev/umbra/api/v4/frogweezer/subtype Response Premium15","title":"with the web API"},{"location":"legal/","text":"","title":"Copyright &copy; 2022 AYVACS on behalf of Umbra Software"},{"location":"libraries/ai/","text":"ai Library wip Project 45 Initializing Requiring parent module 1 ai = require(Umbra:GetService(\"Project45\", true)) Creating a new AI instance AI instances may be created with the new() constructor. 1 local AI_Instance = ai.new() AI instances must be assigned with the to either player Instance s or usernames. AI instances may not be reassigned. Examples (both work) 1 2 AI_Instance:Assign(player: Instance) AI_Instance:Assign(username: string) Destroying an AI instance AI instances may be destroyed with the Exit() method. In order for the destruction to succeed, please supply self.l as the only argument. 1 AI_Instance:Destroy( AI_Instance.l ) Exiting The ai library may be exited with the exit() method. In order to exit, all existing AI instances must be destroyed. 1 ai:exit() Actions Begin tracking AI instances may begin tracking via the Set() method. 1 2 3 4 AI_Instance:Set(endpoint: Enum) -- example: AI_Instance:Set( ai:plrFace() ) Data endpoints All data endpoints: ai:plrCognitiveDesires() ai:plrCookie() ai:plrFace() ai:plrHeartbeat() ai:plrScare() Graphing output 1 2 3 4 5 6 7 8 9 10 11 12 13 14 local graph = AI_Instance.graph() -- calling :Run() will begin the graph's functions and -- automatically turn it on. graph:Run() -- hide: graph:Hide() -- show: graph:Show() -- exit: graph:Rm() Personalization 1 AI_Instance.personalization():_Enable(self)","title":"ai"},{"location":"libraries/ai/#ai-library","text":"wip Project 45","title":"ai Library"},{"location":"libraries/ai/#initializing","text":"","title":"Initializing"},{"location":"libraries/ai/#requiring-parent-module","text":"1 ai = require(Umbra:GetService(\"Project45\", true))","title":"Requiring parent module"},{"location":"libraries/ai/#creating-a-new-ai-instance","text":"AI instances may be created with the new() constructor. 1 local AI_Instance = ai.new() AI instances must be assigned with the to either player Instance s or usernames. AI instances may not be reassigned. Examples (both work) 1 2 AI_Instance:Assign(player: Instance) AI_Instance:Assign(username: string)","title":"Creating a new AI instance"},{"location":"libraries/ai/#destroying-an-ai-instance","text":"AI instances may be destroyed with the Exit() method. In order for the destruction to succeed, please supply self.l as the only argument. 1 AI_Instance:Destroy( AI_Instance.l )","title":"Destroying an AI instance"},{"location":"libraries/ai/#exiting","text":"The ai library may be exited with the exit() method. In order to exit, all existing AI instances must be destroyed. 1 ai:exit()","title":"Exiting"},{"location":"libraries/ai/#actions","text":"","title":"Actions"},{"location":"libraries/ai/#begin-tracking","text":"AI instances may begin tracking via the Set() method. 1 2 3 4 AI_Instance:Set(endpoint: Enum) -- example: AI_Instance:Set( ai:plrFace() )","title":"Begin tracking"},{"location":"libraries/ai/#data-endpoints","text":"All data endpoints: ai:plrCognitiveDesires() ai:plrCookie() ai:plrFace() ai:plrHeartbeat() ai:plrScare()","title":"Data endpoints"},{"location":"libraries/ai/#graphing-output","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 local graph = AI_Instance.graph() -- calling :Run() will begin the graph's functions and -- automatically turn it on. graph:Run() -- hide: graph:Hide() -- show: graph:Show() -- exit: graph:Rm()","title":"Graphing output"},{"location":"libraries/ai/#personalization","text":"1 AI_Instance.personalization():_Enable(self)","title":"Personalization"},{"location":"libraries/fe/","text":"fe Library The fe library (FE lib) contains functions and methods relating to \"Filtering Enabled\", also known as \"Experimental Mode\". What is Filtering Enabled? Filtering Enabled (FE) determines whether changes made from the client will replicate to the server or not. When this property is disabled, the game is in Experimental Mode. Usually, a client cannot update a game's Filtering Enabled state; this is yet another feature only possible with Umbra's powerful execution engine. Functions init bool, string fe:init(key: string) Enables access to the elevated Filtering Enabled engine (EFE) on the client. key defaults to fe.key . This function returns two values: a bool and a string; a success indicator and success message, respectfully. Example local success, msg = fe:init() if success then print(\"Successfully enabled access to the EFE engine with code [\" .. tostring(msg) .. \"]\") -- Successfully enabled access to the EFE engine with code [200 OK] else warn(\"There was an error enabling access to the EFE engine.\") warn(msg) -- There was an error enabling access to the EFE engine. -- 401 UNAUTHORIZED end set nil fe:set(type: EFE) Attempts to override the FE setting using EFE. Example -- override to Filtering Disabled fe:set(EFE.FD) -- override to Filtering Enabled fe:set(EFE.FE) Constants key string fe.key Returns a Roblox Staff-provided key which enables access to the elevated Filtering Enabled engine (EFE) on the client.","title":"fe"},{"location":"libraries/fe/#fe-library","text":"The fe library (FE lib) contains functions and methods relating to \"Filtering Enabled\", also known as \"Experimental Mode\".","title":"fe Library"},{"location":"libraries/fe/#what-is-filtering-enabled","text":"Filtering Enabled (FE) determines whether changes made from the client will replicate to the server or not. When this property is disabled, the game is in Experimental Mode. Usually, a client cannot update a game's Filtering Enabled state; this is yet another feature only possible with Umbra's powerful execution engine.","title":"What is Filtering Enabled?"},{"location":"libraries/fe/#functions","text":"","title":"Functions"},{"location":"libraries/fe/#init","text":"bool, string fe:init(key: string) Enables access to the elevated Filtering Enabled engine (EFE) on the client. key defaults to fe.key . This function returns two values: a bool and a string; a success indicator and success message, respectfully.","title":"init"},{"location":"libraries/fe/#example","text":"local success, msg = fe:init() if success then print(\"Successfully enabled access to the EFE engine with code [\" .. tostring(msg) .. \"]\") -- Successfully enabled access to the EFE engine with code [200 OK] else warn(\"There was an error enabling access to the EFE engine.\") warn(msg) -- There was an error enabling access to the EFE engine. -- 401 UNAUTHORIZED end","title":"Example"},{"location":"libraries/fe/#set","text":"nil fe:set(type: EFE) Attempts to override the FE setting using EFE.","title":"set"},{"location":"libraries/fe/#example_1","text":"-- override to Filtering Disabled fe:set(EFE.FD) -- override to Filtering Enabled fe:set(EFE.FE)","title":"Example"},{"location":"libraries/fe/#constants","text":"","title":"Constants"},{"location":"libraries/fe/#key","text":"string fe.key Returns a Roblox Staff-provided key which enables access to the elevated Filtering Enabled engine (EFE) on the client.","title":"key"},{"location":"libraries/http/","text":"http Library The http library provides methods to easily make HTTP requests in your scripts. It allows users to make use of Roblox's native HttpService functions within LocalScripts (Umbra scripts), which is normally impossible. The source code of this library is available on GitHub . Limitations These limitations are baked into Roblox's engine with no way to bypass them, unless the request is made with an X-FE key - we are currently working on adding X-FE support. There are port restrictions. You cannot use port 1194 or any port below 1024 , except 80 and 443 . If you try to use a blocked port, you will receive either a 403 Forbidden or ERR_ACCESS_DENIED error. For each Roblox game server, there is a limit of 500 HTTP requests per minute . Exceeding this may cause request-sending functions to stall entirely for about 30 seconds . While requests made using the http library are not subject to this limit, they will count towards the limit for other scripts in-game, so please pay attention to that. Requests cannot be made to any Roblox website, such as www.roblox.com . You can bypass this using what is commonly known as a \"Roblox Proxy\" . These functions do not use one. Although the http:// and file:// protocols are supported, you should use https:// wherever possible. These are the only supported protocols. Attempting to perform a GET request targeted at one of the following file types will result in an error: images, i.e. png , jpg , jpeg executables, i.e. exe , app archive files, i.e. zip , rar , 7z Attempting to perform a PUT or PUSH request without proper credentials will result in either a 403 Forbidden or ERR_ACCESS_DENIED error. Be aware of the general capacity and rate-limiting policies of the web servers to which requests are being sent. Functions ajax HttpResponse http.ajax( data: HttpRequest ) Performs an HTTP request with the specified parameters. get string http.get( url: string ) Performs a GET request to the specifed url . post nil http.post( url: string, content: string ) Performs a PUSH request to the specified url with the specified content .","title":"http"},{"location":"libraries/http/#http-library","text":"The http library provides methods to easily make HTTP requests in your scripts. It allows users to make use of Roblox's native HttpService functions within LocalScripts (Umbra scripts), which is normally impossible. The source code of this library is available on GitHub .","title":"http Library"},{"location":"libraries/http/#limitations","text":"These limitations are baked into Roblox's engine with no way to bypass them, unless the request is made with an X-FE key - we are currently working on adding X-FE support. There are port restrictions. You cannot use port 1194 or any port below 1024 , except 80 and 443 . If you try to use a blocked port, you will receive either a 403 Forbidden or ERR_ACCESS_DENIED error. For each Roblox game server, there is a limit of 500 HTTP requests per minute . Exceeding this may cause request-sending functions to stall entirely for about 30 seconds . While requests made using the http library are not subject to this limit, they will count towards the limit for other scripts in-game, so please pay attention to that. Requests cannot be made to any Roblox website, such as www.roblox.com . You can bypass this using what is commonly known as a \"Roblox Proxy\" . These functions do not use one. Although the http:// and file:// protocols are supported, you should use https:// wherever possible. These are the only supported protocols. Attempting to perform a GET request targeted at one of the following file types will result in an error: images, i.e. png , jpg , jpeg executables, i.e. exe , app archive files, i.e. zip , rar , 7z Attempting to perform a PUT or PUSH request without proper credentials will result in either a 403 Forbidden or ERR_ACCESS_DENIED error. Be aware of the general capacity and rate-limiting policies of the web servers to which requests are being sent.","title":"Limitations"},{"location":"libraries/http/#functions","text":"","title":"Functions"},{"location":"libraries/http/#ajax","text":"HttpResponse http.ajax( data: HttpRequest ) Performs an HTTP request with the specified parameters.","title":"ajax"},{"location":"libraries/http/#get","text":"string http.get( url: string ) Performs a GET request to the specifed url .","title":"get"},{"location":"libraries/http/#post","text":"nil http.post( url: string, content: string ) Performs a PUSH request to the specified url with the specified content .","title":"post"},{"location":"libraries/net/","text":"net Library Umbra's development team has found a workaround for net ownership, allowing script users to utilise an elevated version of it to transfer ownership of any object. These functions are contained within the net library. Functions mtransf nil net:mtransf(objs: table, newown: string, key: string) nil objs:mtransf(newown: string) Attempts to transfer ownership of the provided array of instances to newown . objs may be one array of Instance types. newown may be one argument of string type. key may be one argument of string type. It is not required and, if not set, will default to net.key . newown should be, in string form, the UserId (or SystemName ) to which you wish to transfer each value in objs . For example, if you wished to transfer the Workspace's children to the LocalPlayer, you could run the following code: local objects = workspace:GetChildren() local newOwnerId = game:GetService(\"Players\").LocalPlayer.UserId net:mtransf(objects, tostring(newOwnerId)) transf nil net:transf(obj: Instance, newown: string, key: string) nil obj:transf(newown: string) Attempts to transfer ownership of the provided single instance to newown . obj may be one argument of Instance type. newown may be one argument of string type. key may be one argument of string type. It is not required and, if not set, will default to net.key . newown should be, in string form, the UserId (or SystemName ) to which you wish to transfer obj . For example, if you wished to transfer the Workspace to the LocalPlayer, you could run the following code: local object = workspace local newOwnerId = game:GetService(\"Players\").LocalPlayer.UserId net:transf(object, tostring(newOwnerId)) whois string net:whois(obj: Instance) string obj:whois() Returns the UserId or SystemName of obj 's network owner in string form . Constants key string net.key Returns the default network key.","title":"net"},{"location":"libraries/net/#net-library","text":"Umbra's development team has found a workaround for net ownership, allowing script users to utilise an elevated version of it to transfer ownership of any object. These functions are contained within the net library.","title":"net Library"},{"location":"libraries/net/#functions","text":"","title":"Functions"},{"location":"libraries/net/#mtransf","text":"nil net:mtransf(objs: table, newown: string, key: string) nil objs:mtransf(newown: string) Attempts to transfer ownership of the provided array of instances to newown . objs may be one array of Instance types. newown may be one argument of string type. key may be one argument of string type. It is not required and, if not set, will default to net.key . newown should be, in string form, the UserId (or SystemName ) to which you wish to transfer each value in objs . For example, if you wished to transfer the Workspace's children to the LocalPlayer, you could run the following code: local objects = workspace:GetChildren() local newOwnerId = game:GetService(\"Players\").LocalPlayer.UserId net:mtransf(objects, tostring(newOwnerId))","title":"mtransf"},{"location":"libraries/net/#transf","text":"nil net:transf(obj: Instance, newown: string, key: string) nil obj:transf(newown: string) Attempts to transfer ownership of the provided single instance to newown . obj may be one argument of Instance type. newown may be one argument of string type. key may be one argument of string type. It is not required and, if not set, will default to net.key . newown should be, in string form, the UserId (or SystemName ) to which you wish to transfer obj . For example, if you wished to transfer the Workspace to the LocalPlayer, you could run the following code: local object = workspace local newOwnerId = game:GetService(\"Players\").LocalPlayer.UserId net:transf(object, tostring(newOwnerId))","title":"transf"},{"location":"libraries/net/#whois","text":"string net:whois(obj: Instance) string obj:whois() Returns the UserId or SystemName of obj 's network owner in string form .","title":"whois"},{"location":"libraries/net/#constants","text":"","title":"Constants"},{"location":"libraries/net/#key","text":"string net.key Returns the default network key.","title":"key"},{"location":"libraries/tab/","text":"tab Library An extended form of the native table library. The source code of this library is available on GitHub . Added functions tab contains all of table 's functions, plus the following: concat Copies Argument(s) The following function will execute on a copy of the provided table(s), NOT THE ACTUAL TABLE(S) THEMSEL(VES) . This is important to note because when assigning a table to two (or more) different variables, all of the copied tables will update with the other(s). For example, the function tab.prefixAll(t, pre) function will prepend pre to all values of a copy of t , meaning that in order for the actual t variable to change, you must call t = tab.prefixAll(t, pre) , and that simply tab.prefixAll(t, pre) would not work. Furthermore, calling the following code would print false : 1 2 3 4 local t1 = {1, 2, 3} tab.prefixAll(t1, 1) print( t1 == {11, 12, 13} ) table tab.concat(t1: table, t2: table) Concatenates copies of arrays t1 and t2 together in the same manner of strings, numbers, or any other concatenable value. Returns the concatenated array. contains bool tab.contains(t: table, c: any) Determines whether or not table t contains the value c . copy table tab.copy(t: table) Returns a deep copy of t . keys table tab.keys(t: table) Returns an array of table t 's own enumerable property keys , iterated in the same order as that provided by a for...in loop. Example 1 2 3 4 5 local myInventory = { sword = 1, shield = 1 apple = 16, rupee = 1504 } local inventoryItems = tab.keys(myInventory) print(inventoryItems) -- expected result: { sword, shield, apple, rupee } prefixAll Copies Argument(s) The following function will execute on a copy of the provided table(s), NOT THE ACTUAL TABLE(S) THEMSEL(VES) . This is important to note because when assigning a table to two (or more) different variables, all of the copied tables will update with the other(s). For example, the function tab.prefixAll(t, pre) function will prepend pre to all values of a copy of t , meaning that in order for the actual t variable to change, you must call t = tab.prefixAll(t, pre) , and that simply tab.prefixAll(t, pre) would not work. Furthermore, calling the following code would print false : 1 2 3 4 local t1 = {1, 2, 3} tab.prefixAll(t1, 1) print( t1 == {11, 12, 13} ) table tab.prefixAll(t: table, pre: string) Prepends pre to all values of a copy of t . Example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 local t1 = { \", World!\", \" everyone!\" \" there!\" } local t2 = tab.prefixAll(t1, \"Hello\") print(t1[1]) -- \", World!\" print(t2[1]) -- \"Hello, World!\" print(t1[2]) -- \" everyone!\" print(t2[2]) -- \"Hello everyone!\" random any tab.random(t: table) Returns a random value from table t . Example In the following example, the first two lines would produce the same result as the fourth. 1 2 3 4 local t = {1, 4, 8, 9} local r1 = table.random(t, #t) local r2 = tab.random({ 1, 4, 8, 9 }) suffixAll Copies Argument(s) The following function will execute on a copy of the provided table(s), NOT THE ACTUAL TABLE(S) THEMSEL(VES) . This is important to note because when assigning a table to two (or more) different variables, all of the copied tables will update with the other(s). For example, the function tab.prefixAll(t, pre) function will prepend pre to all values of a copy of t , meaning that in order for the actual t variable to change, you must call t = tab.prefixAll(t, pre) , and that simply tab.prefixAll(t, pre) would not work. Furthermore, calling the following code would print false : 1 2 3 4 local t1 = {1, 2, 3} tab.prefixAll(t1, 1) print( t1 == {11, 12, 13} ) table tab.suffixAll(t: table, suf: string) Appepends suf to all values of a copy of t . sum number tab.sum(t: table) Returns the sum of all of t 's number values. If t contains any non-number values, this function simply skips them. tostring string tab.tostring(t: table) Returns a string version of t . This function should not be used within tables, rather for exporting table data into string form. values table tab.values(t: table) Returns an array of table t 's own enumerable property values , iterated in the same order as that provided by a for...in loop. Example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 local myDataStore = { [\"Telamon\"] = { XP = 250 }, [\"ROBLOX\"] = { XP = 15204 }, [\"frogweezer\"] = { XP = 31281 ... } } local allValues = tab.values(myDataStore) local allStats = tab.values(allValues) local allXP = tab.sum(allStats) print(\"Players have collected a total of \" .. allXP .. \" XP in this game!\")","title":"tab"},{"location":"libraries/tab/#tab-library","text":"An extended form of the native table library. The source code of this library is available on GitHub .","title":"tab Library"},{"location":"libraries/tab/#added-functions","text":"tab contains all of table 's functions, plus the following:","title":"Added functions"},{"location":"libraries/tab/#concat","text":"Copies Argument(s) The following function will execute on a copy of the provided table(s), NOT THE ACTUAL TABLE(S) THEMSEL(VES) . This is important to note because when assigning a table to two (or more) different variables, all of the copied tables will update with the other(s). For example, the function tab.prefixAll(t, pre) function will prepend pre to all values of a copy of t , meaning that in order for the actual t variable to change, you must call t = tab.prefixAll(t, pre) , and that simply tab.prefixAll(t, pre) would not work. Furthermore, calling the following code would print false : 1 2 3 4 local t1 = {1, 2, 3} tab.prefixAll(t1, 1) print( t1 == {11, 12, 13} ) table tab.concat(t1: table, t2: table) Concatenates copies of arrays t1 and t2 together in the same manner of strings, numbers, or any other concatenable value. Returns the concatenated array.","title":"concat"},{"location":"libraries/tab/#contains","text":"bool tab.contains(t: table, c: any) Determines whether or not table t contains the value c .","title":"contains"},{"location":"libraries/tab/#copy","text":"table tab.copy(t: table) Returns a deep copy of t .","title":"copy"},{"location":"libraries/tab/#keys","text":"table tab.keys(t: table) Returns an array of table t 's own enumerable property keys , iterated in the same order as that provided by a for...in loop. Example 1 2 3 4 5 local myInventory = { sword = 1, shield = 1 apple = 16, rupee = 1504 } local inventoryItems = tab.keys(myInventory) print(inventoryItems) -- expected result: { sword, shield, apple, rupee }","title":"keys"},{"location":"libraries/tab/#prefixall","text":"Copies Argument(s) The following function will execute on a copy of the provided table(s), NOT THE ACTUAL TABLE(S) THEMSEL(VES) . This is important to note because when assigning a table to two (or more) different variables, all of the copied tables will update with the other(s). For example, the function tab.prefixAll(t, pre) function will prepend pre to all values of a copy of t , meaning that in order for the actual t variable to change, you must call t = tab.prefixAll(t, pre) , and that simply tab.prefixAll(t, pre) would not work. Furthermore, calling the following code would print false : 1 2 3 4 local t1 = {1, 2, 3} tab.prefixAll(t1, 1) print( t1 == {11, 12, 13} ) table tab.prefixAll(t: table, pre: string) Prepends pre to all values of a copy of t . Example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 local t1 = { \", World!\", \" everyone!\" \" there!\" } local t2 = tab.prefixAll(t1, \"Hello\") print(t1[1]) -- \", World!\" print(t2[1]) -- \"Hello, World!\" print(t1[2]) -- \" everyone!\" print(t2[2]) -- \"Hello everyone!\"","title":"prefixAll"},{"location":"libraries/tab/#random","text":"any tab.random(t: table) Returns a random value from table t . Example In the following example, the first two lines would produce the same result as the fourth. 1 2 3 4 local t = {1, 4, 8, 9} local r1 = table.random(t, #t) local r2 = tab.random({ 1, 4, 8, 9 })","title":"random"},{"location":"libraries/tab/#suffixall","text":"Copies Argument(s) The following function will execute on a copy of the provided table(s), NOT THE ACTUAL TABLE(S) THEMSEL(VES) . This is important to note because when assigning a table to two (or more) different variables, all of the copied tables will update with the other(s). For example, the function tab.prefixAll(t, pre) function will prepend pre to all values of a copy of t , meaning that in order for the actual t variable to change, you must call t = tab.prefixAll(t, pre) , and that simply tab.prefixAll(t, pre) would not work. Furthermore, calling the following code would print false : 1 2 3 4 local t1 = {1, 2, 3} tab.prefixAll(t1, 1) print( t1 == {11, 12, 13} ) table tab.suffixAll(t: table, suf: string) Appepends suf to all values of a copy of t .","title":"suffixAll"},{"location":"libraries/tab/#sum","text":"number tab.sum(t: table) Returns the sum of all of t 's number values. If t contains any non-number values, this function simply skips them.","title":"sum"},{"location":"libraries/tab/#tostring","text":"string tab.tostring(t: table) Returns a string version of t . This function should not be used within tables, rather for exporting table data into string form.","title":"tostring"},{"location":"libraries/tab/#values","text":"table tab.values(t: table) Returns an array of table t 's own enumerable property values , iterated in the same order as that provided by a for...in loop. Example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 local myDataStore = { [\"Telamon\"] = { XP = 250 }, [\"ROBLOX\"] = { XP = 15204 }, [\"frogweezer\"] = { XP = 31281 ... } } local allValues = tab.values(myDataStore) local allStats = tab.values(allValues) local allXP = tab.sum(allStats) print(\"Players have collected a total of \" .. allXP .. \" XP in this game!\")","title":"values"},{"location":"libraries/umbra/","text":"Umbra Library wip","title":"Umbra"},{"location":"libraries/umbra/#umbra-library","text":"wip","title":"Umbra Library"},{"location":"scripting/getting-started/","text":"Getting started To write a script, you'll first need an Umbra developer key. If you don't have one, you can get it by following these steps: Log into the Umbra developer portal Go to Home > Credentials > Create key Give your new key a name (something like MyScriptName ) Unlock your key with 2FA Follow the installation steps after you unlock your key In your script, add this line: 1 Umbra = require( SCRIPTLOCATION ):Login( KEY ) Variables Replace SCRIPTLOCATION with the location of the script, and KEY with your key. Manifest If you've already set your script's manifest variable, you can initialize it with this simple function: 1 Umbra = require(manifest.SCRIPTLOCATION):Login(manifest.KEY) Debug Mode If you want to use debug functions, please use this line instead: 1 Umbra = require(SCRIPT):DRM(KEY, [[ Yes I Know What I Am Doing ]])() Simply use :DRM() instead of :Login() , and pass [[ Yes I Know What I Am Doing ]] as an additional second argument to confirm that, well, you know what you are doing. Additionally, add an empty set of brackets after the require function. You'll have to repeat these steps for each individual script that you create. Keep in mind that only one script at a time can be initialized with a certain key. Congrats! you just called the Umbra library in your script. Epic gamer move!!!","title":"Getting started"},{"location":"scripting/getting-started/#getting-started","text":"To write a script, you'll first need an Umbra developer key. If you don't have one, you can get it by following these steps: Log into the Umbra developer portal Go to Home > Credentials > Create key Give your new key a name (something like MyScriptName ) Unlock your key with 2FA Follow the installation steps after you unlock your key In your script, add this line: 1 Umbra = require( SCRIPTLOCATION ):Login( KEY ) Variables Replace SCRIPTLOCATION with the location of the script, and KEY with your key. Manifest If you've already set your script's manifest variable, you can initialize it with this simple function: 1 Umbra = require(manifest.SCRIPTLOCATION):Login(manifest.KEY) Debug Mode If you want to use debug functions, please use this line instead: 1 Umbra = require(SCRIPT):DRM(KEY, [[ Yes I Know What I Am Doing ]])() Simply use :DRM() instead of :Login() , and pass [[ Yes I Know What I Am Doing ]] as an additional second argument to confirm that, well, you know what you are doing. Additionally, add an empty set of brackets after the require function. You'll have to repeat these steps for each individual script that you create. Keep in mind that only one script at a time can be initialized with a certain key. Congrats! you just called the Umbra library in your script. Epic gamer move!!!","title":"Getting started"},{"location":"scripting/my-account/","text":"Managing your Umbra account On the Umbra Developer portal you can: Create and manage your API keys and scripts Update and publish your scripts to the cloud View script databases Manage MFA (Multi-Factor Authentication) Manage your license","title":"Managing your Umbra account"},{"location":"scripting/my-account/#managing-your-umbra-account","text":"On the Umbra Developer portal you can: Create and manage your API keys and scripts Update and publish your scripts to the cloud View script databases Manage MFA (Multi-Factor Authentication) Manage your license","title":"Managing your Umbra account"},{"location":"web-api/","text":"","title":"Home"}]}